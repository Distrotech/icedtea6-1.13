# HG changeset patch
# User andrew
# Date 1371820239 18000
# Node ID f97b2cef7f861a3eb6d78e70cdb2cef1517bb968
# Parent  4215483da6f258a04b3a8ce6015d57ecbc296eac
Fix JSR292

diff --git a/src/share/vm/classfile/javaClasses.cpp b/src/share/vm/classfile/javaClasses.cpp
--- openjdk/hotspot/src/share/vm/classfile/javaClasses.cpp
+++ openjdk/hotspot/src/share/vm/classfile/javaClasses.cpp
@@ -2324,7 +2324,6 @@
 int java_dyn_MethodHandle::_type_offset;
 int java_dyn_MethodHandle::_vmtarget_offset;
 int java_dyn_MethodHandle::_vmentry_offset;
-int java_dyn_MethodHandle::_vmslots_offset;
 
 int sun_dyn_MemberName::_clazz_offset;
 int sun_dyn_MemberName::_name_offset;
@@ -2345,11 +2344,6 @@
   if (k != NULL && EnableMethodHandles) {
     compute_offset(_type_offset,      k, vmSymbols::type_name(),      vmSymbols::java_dyn_MethodType_signature(), true);
     compute_offset(_vmtarget_offset,  k, vmSymbols::vmtarget_name(),  vmSymbols::object_signature(), true);
-    compute_offset(_vmentry_offset,   k, vmSymbols::vmentry_name(),   vmSymbols::machine_word_signature(), true);
-
-    // Note:  MH.vmslots (if it is present) is a hoisted copy of MH.type.form.vmslots.
-    // It is optional pending experiments to keep or toss.
-    compute_optional_offset(_vmslots_offset, k, vmSymbols::vmslots_name(), vmSymbols::int_signature(), true);
   }
 }
 
@@ -2395,31 +2389,9 @@
   mh->obj_field_put(_type_offset, mtype);
 }
 
-int java_dyn_MethodHandle::vmslots(oop mh) {
-  int vmslots_offset = _vmslots_offset;
-  if (vmslots_offset != 0) {
-#ifdef ASSERT
-    int x = mh->int_field(vmslots_offset);
-    int y = compute_vmslots(mh);
-    assert(x == y, "correct hoisted value");
-#endif
-    return mh->int_field(vmslots_offset);
-  } else {
-    return compute_vmslots(mh);
-  }
-}
-
-// if MH.vmslots exists, hoist into it the value of type.form.vmslots
-void java_dyn_MethodHandle::init_vmslots(oop mh) {
-  int vmslots_offset = _vmslots_offset;
-  if (vmslots_offset != 0) {
-    mh->int_field_put(vmslots_offset, compute_vmslots(mh));
-  }
-}
-
 // fetch type.form.vmslots, which is the number of JVM stack slots
 // required to carry the arguments of this MH
-int java_dyn_MethodHandle::compute_vmslots(oop mh) {
+int java_dyn_MethodHandle::vmslots(oop mh) {
   oop mtype = type(mh);
   if (mtype == NULL)  return 0;  // Java code would get NPE
   oop form = java_dyn_MethodType::form(mtype);
@@ -2648,16 +2620,12 @@
 // Support for java_dyn_CallSite
 
 int java_dyn_CallSite::_target_offset;
-int java_dyn_CallSite::_caller_method_offset;
-int java_dyn_CallSite::_caller_bci_offset;
 
 void java_dyn_CallSite::compute_offsets() {
   if (!EnableInvokeDynamic)  return;
   klassOop k = SystemDictionary::CallSite_klass();
   if (k != NULL) {
     compute_offset(_target_offset, k, vmSymbols::target_name(), vmSymbols::java_dyn_MethodHandle_signature());
-    compute_offset(_caller_method_offset, k, vmSymbols::vmmethod_name(), vmSymbols::sun_dyn_MemberName_signature());
-    compute_offset(_caller_bci_offset, k, vmSymbols::vmindex_name(), vmSymbols::int_signature());
   }
 }
 
@@ -2669,23 +2637,6 @@
   site->obj_field_put(_target_offset, target);
 }
 
-oop java_dyn_CallSite::caller_method(oop site) {
-  return site->obj_field(_caller_method_offset);
-}
-
-void java_dyn_CallSite::set_caller_method(oop site, oop ref) {
-  site->obj_field_put(_caller_method_offset, ref);
-}
-
-jint java_dyn_CallSite::caller_bci(oop site) {
-  return site->int_field(_caller_bci_offset);
-}
-
-void java_dyn_CallSite::set_caller_bci(oop site, jint bci) {
-  site->int_field_put(_caller_bci_offset, bci);
-}
-
-
 // Support for java_security_AccessControlContext
 
 int java_security_AccessControlContext::_context_offset = 0;
diff --git a/src/share/vm/classfile/javaClasses.hpp b/src/share/vm/classfile/javaClasses.hpp
--- openjdk/hotspot/src/share/vm/classfile/javaClasses.hpp
+++ openjdk/hotspot/src/share/vm/classfile/javaClasses.hpp
@@ -872,7 +872,7 @@
 };
 
 #define DIRECTMETHODHANDLE_INJECTED_FIELDS(macro)                          \
-  macro(java_dyn_DirectMethodHandle, vmindex, int_signature, true)
+  macro(sun_dyn_DirectMethodHandle, vmindex, int_signature, true)
 
 class sun_dyn_DirectMethodHandle: public java_dyn_MethodHandle {
   friend class JavaClasses;
@@ -1090,8 +1090,7 @@
 };
 
 #define METHODTYPEFORM_INJECTED_FIELDS(macro)                              \
-  macro(java_dyn_MethodTypeForm, vmslots,  int_signature,    true) \
-  macro(java_dyn_MethodTypeForm, vmlayout, object_signature, true)
+  macro(java_dyn_MethodTypeForm, vmslots,  int_signature,    true)
 
 class java_dyn_MethodTypeForm: AllStatic {
   friend class JavaClasses;
diff --git a/src/share/vm/classfile/symbolTable.cpp b/src/share/vm/classfile/symbolTable.cpp
--- openjdk/hotspot/src/share/vm/classfile/symbolTable.cpp
+++ openjdk/hotspot/src/share/vm/classfile/symbolTable.cpp
@@ -291,7 +291,6 @@
   if (!added) {
     // do it the hard way
     for (int i=0; i<names_count; i++) {
-      assert(!Universe::heap()->is_in_reserved(names[i]) || GC_locker::is_active(),
       int index = table->hash_to_index(hashValues[i]);
       Symbol* sym = table->basic_add(index, (u1*)names[i], lengths[i],
                                        hashValues[i], CHECK);
@@ -300,7 +299,7 @@
   }
 }
 
-Symbol* SymbolTable::basic_add(int index, u1 *name, int len,
+Symbol* SymbolTable::basic_add(int index_arg, u1 *name, int len,
                                  unsigned int hashValue_arg, TRAPS) {
   assert(!Universe::heap()->is_in_reserved(name) || GC_locker::is_active(),
          "proposed name of symbol must be stable");
@@ -591,7 +590,7 @@
 }
 
 
-oop StringTable::basic_add(int index, Handle string_or_null, jchar* name,
+oop StringTable::basic_add(int index_arg, Handle string_or_null, jchar* name,
                            int len, unsigned int hashValue_arg, TRAPS) {
   debug_only(StableMemoryChecker smc(name, len * sizeof(name[0])));
   assert(!Universe::heap()->is_in_reserved(name) || GC_locker::is_active(),
