diff -r 0dd28ac12d7d test/compiler/6990212/Test6990212.java
--- openjdk/hotspot/test/compiler/6990212/Test6990212.java	Mon Jan 19 07:36:09 2015 +0000
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,56 +0,0 @@
-/*
- * Copyright (c) 2011, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- *
- */
-
-/**
- * @test
- * @bug 6990212
- * @summary JSR 292 JVMTI MethodEnter hook is not called for JSR 292 bootstrap and target methods
- *
- * @run main Test6990212
- */
-
-import java.lang.invoke.*;
-
-interface intf {
-    public Object target();
-}
-
-public class Test6990212 implements intf {
-    public Object target() {
-        return null;
-    }
-
-    public static void main(String[] args) throws Throwable {
-        // Build an interface invoke and then invoke it on something
-        // that doesn't implement the interface to test the
-        // raiseException path.
-        MethodHandle target = MethodHandles.lookup().findVirtual(intf.class, "target",  MethodType.methodType(Object.class));
-        try {
-            target.invoke(new Object());
-        } catch (ClassCastException cce) {
-            // everything is ok
-            System.out.println("got expected ClassCastException");
-        }
-    }
-}
diff -r 0dd28ac12d7d test/compiler/7141637/SpreadNullArg.java
--- openjdk/hotspot/test/compiler/7141637/SpreadNullArg.java	Mon Jan 19 07:36:09 2015 +0000
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,66 +0,0 @@
-/*
- * Copyright 2011 SAP AG.  All Rights Reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-
-/*
- * @test SpreadNullArg
- * @bug 7141637
- * @summary  verifies that the MethodHandle spread adapter can gracefully handle null arguments.
- * @run main SpreadNullArg
- * @author volker.simonis@gmail.com
- */
-
-import java.lang.invoke.MethodHandle;
-import java.lang.invoke.MethodHandles;
-import java.lang.invoke.MethodType;
-
-public class SpreadNullArg {
-
-  public static void main(String args[]) {
-
-    MethodType mt_ref_arg = MethodType.methodType(int.class, Integer.class);
-    MethodHandle mh_spreadInvoker = MethodHandles.spreadInvoker(mt_ref_arg, 0);
-    MethodHandle mh_spread_target;
-    int result = 42;
-
-    try {
-      mh_spread_target =
-        MethodHandles.lookup().findStatic(SpreadNullArg.class, "target_spread_arg", mt_ref_arg);
-      result = (int) mh_spreadInvoker.invokeExact(mh_spread_target, (Object[]) null);
-      throw new Error("Expected IllegalArgumentException was not thrown");
-    } catch (IllegalArgumentException e) {
-      System.out.println("Expected exception : " + e);
-    } catch (Throwable e) {
-      throw new Error(e);
-    }
-
-    if (result != 42) {
-      throw new Error("result [" + result
-        + "] != 42 : Expected IllegalArgumentException was not thrown?");
-    }
-  }
-
-  public static int target_spread_arg(Integer i1) {
-    return i1.intValue();
-  }
-
-}
diff -r 0dd28ac12d7d test/compiler/7158807/Test7158807.java
--- openjdk/hotspot/test/compiler/7158807/Test7158807.java	Mon Jan 19 07:36:09 2015 +0000
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,66 +0,0 @@
-/*
- * Copyright (c) 2012, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- *
- */
-
-/**
- * @test
- * @bug 7158807
- * @summary Revise stack management with volatile call sites
- * @author Marc Schonefeld
- *
- * @run main/othervm -XX:CompileThreshold=100 -Xbatch -Xss248k Test7158807
- */
-
-import java.lang.invoke.MethodHandle;
-import java.lang.invoke.MethodType;
-import java.lang.invoke.VolatileCallSite;
-
-public class Test7158807 {
-    /**
-     * @param args the command line arguments
-     */
-    public static void main(String[] args) throws Throwable {
-        for (int i = 0; i < 25600; i++) {
-            MethodType mt = MethodType.methodType(java.lang.String.class);
-            System.out.println(mt);
-            MethodType mt3 = null;
-            try {
-              mt3 = MethodType.genericMethodType(i);
-            } catch (IllegalArgumentException e) {
-              System.out.println("Passed");
-              System.exit(95);
-            }
-            System.out.println(i+":");
-            try {
-                VolatileCallSite vcs = new VolatileCallSite(mt3);
-                System.out.println(vcs);
-                MethodHandle mh = vcs.dynamicInvoker();
-                vcs.setTarget(mh);
-                // System.out.println(mh);
-                mh.invoke(mt, mh);
-            } catch (Throwable e) {
-            }
-        }
-    }
-}
-
